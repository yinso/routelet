// Generated by CoffeeScript 1.4.0
(function() {
  var Response, errorlet, loglet, util, _, _hasResetModal;

  loglet = require('loglet');

  _ = require('underscore');

  util = require('./util');

  errorlet = require('errorlet');

  _hasResetModal = function(xhr) {
    var header;
    header = xhr.getResponseHeader('X-RESET-MODAL');
    loglet.log('_hasResetModal', xhr.url, header);
    if (header) {
      return true;
    } else {
      return false;
    }
  };

  Response = (function() {

    Response.create = function(req, xhr, data) {
      var status;
      status = xhr.status;
      if (xhr.status < 400) {
        return this.createSuccess(req, xhr, data);
      } else {
        return this.createError(req, xhr, data);
      }
    };

    Response.createSuccess = function(req, xhr, data) {
      var $, clientRedirect, contentType, obj, resetModal, uri;
      $ = req.app.$;
      contentType = xhr.getResponseHeader('content-type');
      uri = xhr.getResponseHeader('X-URL');
      resetModal = _hasResetModal(xhr);
      clientRedirect = xhr.getResponseHeader('X-CLIENT-REDIRECT');
      if (clientRedirect) {
        return new this({
          redirectURL: clientRedirect,
          request: req,
          url: uri,
          resetModal: resetModal
        });
      } else if (!contentType) {
        throw errorlet.create({
          error: 'unknown_data_type',
          contentType: contentType,
          url: uri,
          data: data,
          resetModal: resetModal
        });
      } else if (contentType.match(/^text\/html/i)) {
        return new this({
          elements: $(data),
          request: req,
          url: uri,
          resetModal: resetModal
        });
      } else if (contentType.match(/^application\/json/i)) {
        obj = data instanceof Object ? data : JSON.parse(data);
        return new this({
          data: obj,
          request: req,
          url: uri,
          resetModal: resetModal
        });
      } else {
        throw errorlet.create({
          error: 'unknown_data_type',
          contentType: contentType,
          url: uri,
          data: data,
          resetModal: resetModal
        });
      }
    };

    Response.createError = function(req, xhr, data) {
      var contentType, error, key, obj, val;
      contentType = xhr.getResponseHeader('Content-Type');
      error = errorlet.create({
        error: 'http_response_error',
        statusCode: xhr.status
      });
      if (!contentType) {
        return new this({
          error: error,
          request: req,
          url: req.url
        });
      } else if (contentType.match(/^application\/json/i)) {
        try {
          obj = JSON.parse(data);
          for (key in obj) {
            val = obj[key];
            error[key] = val;
          }
          return new this({
            error: error,
            request: req,
            url: req.url
          });
        } catch (e) {
          return error.data = data;
        }
      } else if (contentType.match(/^text\/html/i)) {
        loglet.log('error.html', req.url, contentType, data);
        return new this({
          error: error,
          elements: $(data),
          request: req,
          url: req.url
        });
      } else {
        return new this({
          error: error,
          request: req,
          url: req.url
        });
      }
    };

    function Response(options) {
      this.options = options;
      _.extend(this, this.options);
      this.url = this.normalizeURL(this.url);
    }

    Response.prototype.normalizeURL = function(uri) {
      var parsed;
      parsed = util.parse(uri);
      delete parsed.query[this.request.app.options.stateKeys.layout];
      return util.stringify(parsed);
    };

    Response.prototype.render = function(elementID) {
      if (elementID == null) {
        elementID = null;
      }
      loglet.log('Response.render.resetModal', this.resetModal, this.request.app.pageMode);
      if (this.resetModal) {
        this.request.app.setPageMode('page');
      }
      if (this.redirectURL) {
        return this.redirect(this.redirectURL);
      } else if (this.request.properties.hasOwnProperty('modal') || this.request.app.pageMode === 'modal') {
        return this.modal(this.request.properties.modal);
      } else {
        return this.page(elementID);
      }
    };

    Response.prototype.modal = function(modalID) {
      var $, app, title,
        _this = this;
      if (modalID == null) {
        modalID = this.request.app.options.modalID;
      }
      app = this.request.app;
      $ = app.$;
      if (!this.elements) {
        throw errorlet.create({
          error: 'modal_not_a_visual_response'
        });
      } else {
        app.setPageMode('modal');
        $("" + modalID + " .modal-body").fadeOut('fast', function() {
          return $("" + modalID + " .modal-body").empty().append(_this.elements).fadeIn('fast').trigger('inserted', _this);
        });
        title = this.elements.find("div.title").text();
        this.elements.find("div.title").empty();
        $("" + modalID + " .modal-title").empty().text(title);
        return $(modalID).focus();
      }
    };

    Response.prototype.redirect = function(uri, data) {
      var normalized, parsed;
      if (data == null) {
        data = {};
      }
      parsed = util.parse(uri);
      _.extend(parsed.query, data);
      normalized = util.stringify(parsed);
      return this.request.app.dispatch(normalized);
    };

    Response.prototype.renderWidget = function(elementID) {
      var $, app,
        _this = this;
      app = this.request.app;
      $ = app.$;
      return $(elementID).fadeOut('fast', function() {
        return $(elementID).empty().append(_this.elements).fadeIn('fast');
      });
    };

    Response.prototype.page = function(elementID) {
      var $, app,
        _this = this;
      if (elementID == null) {
        elementID = this.request.app.options.pageID;
      }
      app = this.request.app;
      $ = app.$;
      app.setPageMode('page');
      return $(elementID).fadeOut('fast', function() {
        return $(elementID).empty().append(_this.elements).fadeIn('fast').trigger('inserted', [
          _this, {
            url: _this.url,
            page: elementID
          }
        ]);
      });
    };

    return Response;

  })();

  module.exports = Response;

}).call(this);
