// Generated by CoffeeScript 1.4.0
(function() {
  var Route, Router, async, loglet, series, util, _,
    __slice = [].slice;

  Route = require('./route');

  util = require('./util');

  _ = require('underscore');

  async = require('async');

  loglet = require('loglet');

  series = function(tasks, cb) {};

  Router = (function() {

    Router.create = function() {
      return new this();
    };

    function Router() {
      this.table = [];
    }

    Router.prototype.use = function() {
      var handle, middleware, routePath, _i;
      routePath = arguments[0], middleware = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^.+$/, routePath, middleware, handle);
    };

    Router.prototype.get = function() {
      var handle, middleware, routePath, _i;
      routePath = arguments[0], middleware = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^get$/, routePath, middleware, handle);
    };

    Router.prototype.post = function() {
      var handle, middleware, routePath, _i;
      routePath = arguments[0], middleware = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^post$/, routePath, middleware, handle);
    };

    Router.prototype.put = function() {
      var handle, middleware, routePath, _i;
      routePath = arguments[0], middleware = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^put$/, routePath, middleware, handle);
    };

    Router.prototype["delete"] = function() {
      var handle, middleware, routePath, _i;
      routePath = arguments[0], middleware = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^delete$/, routePath, middleware, handle);
    };

    Router.prototype._add = function(verb, routePath, middleware, handle) {
      var errorHandlers, handlers, route, task, _i, _len, _ref;
      route = new Route(routePath);
      handlers = [];
      errorHandlers = [];
      _ref = middleware.concat(handle);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (task.length > 2) {
          errorHandlers.push(task);
        } else {
          handlers.push(task);
        }
      }
      return this.table.push({
        verb: verb,
        route: route,
        handlers: handlers,
        errorHandlers: errorHandlers
      });
    };

    Router.prototype.match = function(req) {
      var errorHandlers, handlers, normalized, params, result, route, verb, _i, _len, _ref, _ref1;
      result = [];
      normalized = util.normalizeURL(req.url);
      _ref = this.table;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], verb = _ref1.verb, route = _ref1.route, handlers = _ref1.handlers, errorHandlers = _ref1.errorHandlers;
        if (req.method.match(verb)) {
          params = route.match(normalized);
          if (params) {
            result.push({
              params: params,
              handlers: handlers,
              errorHandlers: errorHandlers
            });
          }
        }
      }
      return result;
    };

    Router.prototype.dispatch = function(req, cb) {
      var routes;
      if (cb == null) {
        cb = function() {};
      }
      routes = this.match(req);
      loglet.log('Router.run', req, routes);
      return this._runRoutes(routes, 0, null, req, cb);
    };

    Router.prototype._runRoutes = function(routes, i, err, req, cb) {
      var errorHelper, helper,
        _this = this;
      if (i < routes.length) {
        if (err) {
          errorHelper = function(handler, next) {
            return handler(err, req, next);
          };
          return async.eachSeries(routes[i].errorHandlers, errorHelper, function(err) {
            if (err === 'route') {
              return _this._runRoutes(routes, i + 1, null, req, cb);
            } else if (err) {
              return _this._runRoutes(routes, i + 1, err, req, cb);
            } else {
              return _this._runRoutes(routes, i + 1, null, req, cb);
            }
          });
        } else {
          helper = function(handler, next) {
            return handler(req, next);
          };
          req.params = routes[i].params || {};
          return async.eachSeries(routes[i].handlers, helper, function(err) {
            if (err === 'route') {
              return _this._runRoutes(routes, i + 1, null, req, cb);
            } else if (err) {
              if (routes[i].errorHandlers.length > 0) {
                return _this._runRoutes(routes, i, err, req, cb);
              } else {
                return _this._runRoutes(routes, i + 1, err, req, cb);
              }
            } else {
              return _this._runRoutes(routes, i + 1, null, req, cb);
            }
          });
        }
      } else {
        return cb(null);
      }
    };

    return Router;

  })();

  module.exports = Router;

}).call(this);
