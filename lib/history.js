// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, History, HistoryEntry, loglet, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  loglet = require('loglet');

  HistoryEntry = (function() {

    function HistoryEntry(state, title, url) {
      this.title = title;
      this.url = url;
      _.extend(this, state);
      this.__ts = new Date();
    }

    HistoryEntry.prototype.compare = function(entry) {
      if (this.__ts < entry.__ts) {
        return -1;
      } else if (this.__ts === entry.__ts) {
        return 0;
      } else {
        return 1;
      }
    };

    return HistoryEntry;

  })();

  History = (function(_super) {

    __extends(History, _super);

    function History($, url) {
      var entry,
        _this = this;
      this.$ = $;
      this.inner = [];
      this.current = 0;
      entry = this.addState({}, null, url);
      if (history.replaceState) {
        history.replaceState(entry, null, url);
      }
      this.$(window).on('popstate', function(evt) {
        var index;
        loglet.log('History.onPopState', evt);
        entry = evt.originalEvent.state;
        if (entry) {
          index = _this.findState(entry);
          return _this.emit('popstate', entry);
        }
      });
      this.$(document).on('click', 'a', function(evt) {
        _this.clearForward();
        return true;
      });
    }

    History.prototype.clearForward = function() {
      this.inner.splice(this.current, this.inner.length - this.current);
    };

    History.prototype.findState = function(entry) {
      return this.inner.indexOf(entry);
    };

    History.prototype.addState = function(state, title, url) {
      var entry;
      entry = new HistoryEntry(state, title, url);
      this.inner.push(entry);
      this.current = this.inner.length - 1;
      return entry;
    };

    History.prototype.pushState = function(state, title, url) {
      var entry;
      entry = this.addState(state, title, url);
      return history.pushState(entry, title, url);
    };

    History.prototype.pushStateIf = function(state, title, url, popState) {
      if (!popState) {
        loglet.log('History.pushState', url, state);
        return this.pushState(state, title, url);
      }
    };

    History.prototype.replaceState = function(state, title, url) {
      return history.replaceState(state, title, url);
    };

    History.prototype.back = function() {
      return history.back();
    };

    History.prototype.forward = function() {
      return history.forward();
    };

    return History;

  })(EventEmitter);

  module.exports = History;

}).call(this);
