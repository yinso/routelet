// Generated by CoffeeScript 1.4.0
(function() {
  var Request, Response, default_charset, default_form_enctype, errorlet, loglet, multipart_form_data, util, _;

  util = require('./util');

  _ = require('underscore');

  Response = require('./response');

  loglet = require('loglet');

  errorlet = require('errorlet');

  default_charset = 'utf-8';

  default_form_enctype = 'application/x-www-form-urlencoded';

  multipart_form_data = 'multipart/form-data';

  Request = (function() {

    Request.fromForm = function(form, evt, app) {
      var charset, enctype;
      charset = $(form).prop('accept-charset') || default_charset;
      enctype = $(form).prop('enctype') || default_form_enctype;
      return new this({
        method: $(form).prop('method'),
        url: $(form).prop('action'),
        body: $(form).formValue(evt),
        headers: {
          'Content-Type': enctype === multipart_form_data ? false : "" + enctype + "; charset=" + charset
        },
        target: $(form).prop('target') || '_self',
        app: app,
        properties: $(form).data(),
        element: form
      });
    };

    Request.fromAnchor = function(anchor, evt, app) {
      return new this({
        method: 'get',
        url: $(anchor).prop('href'),
        lang: $(anchor).prop('hreflang') || 'en',
        type: $(anchor).prop('type') || 'text/html',
        download: $(anchor).prop('download') || false,
        media: $(anchor).prop('media'),
        rel: $(anchor).prop('rel'),
        target: $(anchor).prop('target'),
        app: app,
        properties: $(anchor).data(),
        element: anchor
      });
    };

    Request.fromPopState = function(state, app) {
      return new this({
        method: 'get',
        url: state.url,
        app: app,
        popState: state,
        properties: {}
      });
    };

    Request.fromURL = function(url, app) {
      return new this({
        method: 'get',
        url: url,
        app: app,
        properties: {}
      });
    };

    function Request(params) {
      var parsed;
      _.extend(this, params);
      parsed = util.parse(this.url);
      this.query = _.extend(this.params || {}, parsed.query || {});
      this.headers || (this.headers = {});
      this.params || (this.params = {});
    }

    Request.prototype.header = function(key, val) {};

    Request.prototype.param = function(key, val) {
      if (this.params.hasOwnProperty(key)) {
        return this.params[key];
      } else if (this.body.hasOwnProperty(key)) {
        return this.body[key];
      } else {
        return this.query[key];
      }
    };

    Request.prototype.forward = function(cb) {
      switch (this.method) {
        case 'get':
          return this.get(cb);
        case 'post':
          return this.post(cb);
        default:
          return cb(null, errorlet.create({
            error: 'unimplemented_http_request',
            method: this.method,
            request: this
          }));
      }
    };

    Request.prototype.request = function(options, cb) {
      var $, data, req;
      $ = this.app.$;
      req = this;
      data = _.extend((this.app.pageMode === 'modal' ? {
        '*l': false
      } : {}), options.data || this.app.normalizeData(this.body));
      return $.ajax({
        type: options.type || 'post',
        url: options.url || this.url,
        data: data,
        success: function(data, status, xhr) {
          var res;
          try {
            res = Response.createSuccess(req, xhr, data);
            return cb(null, res);
          } catch (e) {
            return cb(e);
          }
        },
        error: function(xhr, status, error) {
          var res;
          loglet.log('request.error', options.url || this.url, xhr, status, error);
          try {
            res = Response.createError(req, xhr, xhr.responseText);
            return cb(res.error, res);
          } catch (e) {
            return cb(e);
          }
        }
      });
    };

    Request.prototype.post = function(cb) {
      return this.request({
        type: 'post',
        url: this.url,
        headers: this.headers,
        data: this.app.normalizeData(this.body)
      }, cb);
    };

    Request.prototype.get = function(cb) {
      return this.request({
        type: 'get',
        url: this.url,
        headers: this.headers,
        data: this.app.normalizeData(this.body)
      }, cb);
    };

    Request.prototype.download = function() {
      return window.location = this.url;
    };

    return Request;

  })();

  module.exports = Request;

}).call(this);
