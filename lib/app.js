// Generated by CoffeeScript 1.4.0
(function() {
  var $, Application, Request, Router, aryToObj, defaultOptions, errorlet, isFunction, loglet, util, _,
    __slice = [].slice;

  Router = require('./router');

  Request = require('./request');

  $ = require('jquery');

  require('bootstrap');

  require('bootstrap.tagsinput');

  require('bootstrap.wysiwyg');

  loglet = require('loglet');

  util = require('./util');

  errorlet = require('errorlet');

  _ = require('underscore');

  isFunction = function(o) {
    return typeof o === 'function' || o instanceof Function;
  };

  aryToObj = function(ary, obj) {
    var name, value, _i, _len, _ref;
    if (obj == null) {
      obj = {};
    }
    for (_i = 0, _len = ary.length; _i < _len; _i++) {
      _ref = ary[_i], name = _ref.name, value = _ref.value;
      if (obj.hasOwnProperty(name)) {
        if (obj[name] instanceof Array) {
          obj[name].push(value);
        } else {
          obj[name] = [obj[name], value];
        }
      } else {
        obj[name] = value;
      }
    }
    return obj;
  };

  $.fn.formValue = function(evt) {
    var obj;
    obj = aryToObj($(this).serializeArray());
    obj[evt.target.name] = evt.target.value;
    return obj;
  };

  defaultOptions = {
    pageID: '#main',
    modalID: '#myModal',
    stateKeys: {
      "continue": '*cnt',
      layout: '*l'
    },
    everyReq: {}
  };

  Application = (function() {

    Application.Router = Router;

    Application.create = function(options) {
      if (options == null) {
        options = {};
      }
      return new this(options);
    };

    function Application(options) {
      var _base;
      if (options == null) {
        options = {};
      }
      this.options = _.extend({}, defaultOptions, options);
      this.$ = $;
      this.location = util.parse(window.location.href);
      this.router = new Router();
      (_base = this.options).modalID || (_base.modalID = '#myModal');
    }

    Application.prototype.initialize = function(options, cb) {
      var app;
      app = this;
      $ = app.$;
      $(function() {
        app.initializeWidgets();
        $(document).on('inserted', function(evt, res, options) {
          if (options == null) {
            options = {};
          }
          app.initializeWidgets(res.elements);
          loglet.log('inserted', evt, res, options, history.pushState);
          if (options.url && history.pushState) {
            history.pushState(options, null, options.url);
          }
          return false;
        }).on('submit', 'form', function(evt) {
          var req;
          req = Request.fromForm(this, evt, app);
          app.dispatch(req);
          return false;
        }).on('click', 'a', function(evt) {
          var req;
          loglet.log('a.click', this, app.isExternalURL($(this).prop('href')));
          if (app.isExternalURL($(this).prop('href'))) {
            window.open($(this).prop('href'), '_blank');
            return false;
          } else {
            req = Request.fromAnchor(this, evt, app);
            app.dispatch(req);
            return false;
          }
        });
        if (history.pushState) {
          $(window).on('popstate', function(evt) {
            var req;
            loglet.log('window.popState', arguments);
            req = Request.fromPopState(evt, app);
            return app.dispatch(req);
          });
          history.pushState({
            page: '#main',
            url: util.normalizeURL(location)
          }, null, util.normalizeURL(location));
        }
        if (isFunction(cb)) {
          return cb(app);
        }
      });
      return app;
    };

    Application.prototype._add = function(verb, routePath, middlewares, handle) {
      if (typeof routePath !== 'string') {
        this._add(verb, '/', [routePath].concat(middlewares), handle);
      } else {
        this.router._add(verb, routePath, middlewares, handle);
      }
      return this;
    };

    Application.prototype.use = function() {
      var handle, middlewares, routePath, _i;
      routePath = arguments[0], middlewares = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^.+$/, routePath, middlewares, handle);
    };

    Application.prototype.get = function() {
      var handle, middlewares, routePath, _i;
      routePath = arguments[0], middlewares = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^get$/, routePath, middlewares, handle);
    };

    Application.prototype.post = function() {
      var handle, middlewares, routePath, _i;
      routePath = arguments[0], middlewares = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^post$/, routePath, middlewares, handle);
    };

    Application.prototype.put = function() {
      var handle, middlewares, routePath, _i;
      routePath = arguments[0], middlewares = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^put$/, routePath, middlewares, handle);
    };

    Application.prototype["delete"] = function() {
      var handle, middlewares, routePath, _i;
      routePath = arguments[0], middlewares = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), handle = arguments[_i++];
      return this._add(/^delete$/, routePath, middlewares, handle);
    };

    Application.prototype.dispatch = function(req, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.router.dispatch(req, cb);
    };

    Application.prototype.initializeWidgets = function(elts) {
      if (elts == null) {
        elts = this.$(document);
      }
      this.initializeForms(elts);
      return this.initializeAnchors(elts);
    };

    Application.prototype.initializeForms = function(elts) {
      var app;
      app = this;
      return elts.find('form').each(function(i, form) {
        return loglet.log('Application.initializeForm', form);
      });
      /*
            .on 'submit', (evt) ->
              req = Request.fromForm @, evt, app
              app.dispatch req
              false
      */

    };

    Application.prototype.isExternalURL = function(href) {
      var parsed;
      parsed = util.parse(href);
      return this.location.host !== parsed.host;
    };

    Application.prototype.initializeAnchors = function(elts) {
      var app;
      app = this;
      return elts.find('a').each(function(i, anchor) {
        if (app.isExternalURL(app.$(anchor).prop('href'))) {
          return $(anchor).addClass('external');
        }
      });
      /*
            .on 'click', (evt) ->
              loglet.log 'a.click', @, app.isExternalURL $(@).prop('href')
              if app.isExternalURL $(@).prop('href')
                window.open $(@).prop('href'), '_blank'
                false
              else
                req = Request.fromAnchor @, evt, app
                app.dispatch req
                false
      */

    };

    Application.prototype.normalizeData = function(data) {
      var state;
      if (data == null) {
        data = {};
      }
      state = {};
      state[this.options.stateKeys.layout] = false;
      data = _.extend({}, this.options.everyReq || {}, state, data);
      return data;
    };

    Application.prototype.modal = function(res) {
      return $ = this.$;
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
